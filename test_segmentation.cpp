#include <iostream>
#include <sstream>
#include <fstream>
#include <stdio.h>
#include "word_segmentation.hpp"

void Menu() //ï¿½ï¿½Ê¾ï¿½Ëµï¿½(ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢)
{
    printf("\n%s\n\n\n\n", "ï¿½ï¿½ï¿½ï¿½Êµï¿½ï¿½Ñ¼ï¿½ï¿½Ø³É¹ï¿½ï¿½ï¿?");
}

int main(int argc, char **argv) //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
{
    if (argc != 2)
    {
        printf("Please input file.\n");
        return true;
    }

    WordSegmentation::Dictionary *dict = new WordSegmentation::Dictionary();
    dict->BuildHead();                            //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í·
    Menu();                                       //ï¿½ï¿½Ê¾ï¿½Ëµï¿½
    bool ret = dict->BuildTree("segdict_gb2312"); //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    if (false == ret)
    {
        printf("%s\n", "ï¿½Öµä²»ï¿½ï¿½ï¿½Ú£ï¿½ï¿½ï¿½Ø±Õ³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Öµäµ½ï¿½ï¿½Ä¿Â?");
        usleep(3 * 1000000); //ï¿½ï¿½Ê±3ï¿½ï¿½
    }

    if (NULL == argv[1]) //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¾ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½
    {
        printf("%s\n", "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Òªï¿½ï¿½ï¿½ï¿½ï¿½Ä¾ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½");
        // _sleep(3 * 1000); //ï¿½ï¿½Ê±3ï¿½ï¿½
        usleep(3 * 1000000); //ï¿½ï¿½Ê±3ï¿½ï¿½
        return false;
    }
    std::fstream in_file(argv[1]);
    std::fstream out_file("translate_out", std::ios::out);

    //ï¿½ï¿½ï¿½ï¿½Òªï¿½Ö´ÊµÄ¾ï¿½ï¿½ï¿½
    while (!in_file.eof())
    {
        std::string del_str;
        getline(in_file, del_str);
        printf("string: %s\n", del_str.c_str());
        printf("result: %s\n\n", dict->Segdict(del_str).c_str());
        out_file << dict->Segdict(del_str).c_str() << std::endl;
    }
    out_file.close();
    return 0; //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
}